module Tufts
  ##
  # @class
  # Handles the migration-specific data in a raw database table.
  class MigrationData

    ##
    # Sets all our database labels.
    def initialize
      @table_name = "tdl_migration_data"
      @tdl_column = "tdl_id"
      @tdl_solr_column = "tdl_solr_id"
      @fedora_column = "fedora_id"
      @fedora_solr_column = "fedora_solr_id"
    end

    def create_table
      execute(<<-EOT)
        CREATE TABLE IF NOT EXISTS #{@table_name} (
          #{@tdl_column} VARCHAR(255) NOT NULL,
          #{@tdl_solr_column} VARCHAR(255) NOT NULL,
          #{@fedora_column} VARCHAR(255) NOT NULL UNIQUE,
          #{@fedora_solr_column} VARCHAR(255) NOT NULL,
          PRIMARY KEY (#{@tdl_column})
        );
      EOT
    end

    ##
    # Retrieves data based on FedoraResource id.
    def search_by_fed_id(fed_id)
      results = execute(<<-EOT)
        SELECT * FROM #{@table_name}
        WHERE #{@fedora_column} = "#{fed_id}";
      EOT

      return {} if(results.count == 0)

      add_column_names_to_result(results.first)
    end

    ##
    # Retrieves data based on FedoraResource id.
    def search_by_fed_doc_id(fed_doc_id)
      results = execute(<<-EOT)
        SELECT * FROM #{@table_name}
        WHERE #{@fedora_solr_column} = "#{fed_doc_id}";
      EOT

      return {} if(results.count == 0)

      add_column_names_to_result(results.first)
    end

    ##
    # Turns the results array into an array of hashes with column names as keys.
    def add_column_names_to_result(result)
      cols = [@tdl_column,@tdl_solr_column,@fedora_column,@fedora_solr_column]
      Hash[cols.zip(result)].symbolize_keys
    end

    ##
    # Adds a row of data, you need all params.s
    # @param {str} tdl_id
    #   The TdlResource id.
    # @param {str} tdl_solr_id
    #   The SolrDocument generated by the TdlResource.
    # @param {str} fedora_id
    #   The FedoraResource id.
    # @param {str} tdl_id
    #   The SolrDocument generated by the FedoraResource.
    def add_row(tdl_id, tdl_solr_id, fedora_id, fedora_solr_id)
      execute(<<-EOT)
        INSERT INTO #{@table_name}
          (#{@tdl_column},#{@tdl_solr_column},#{@fedora_column},#{@fedora_solr_column})
          VALUES("#{tdl_id}","#{tdl_solr_id}","#{fedora_id}","#{fedora_solr_id}");
      EOT
    end

    def clear_table
      execute("TRUNCATE TABLE #{@table_name};")
    end

    def drop_table
      execute("DROP TABLE IF EXISTS #{@table_name};")
    end

    def execute(sql)
      ActiveRecord::Base.connection.execute(sql)
    end
  end
end